=== tests/cases/compiler/omitTypeHelperModifiers01.ts ===
type A = {
>A : A

    a: number;
>a : number

    b?: string;
>b : string | undefined

    readonly c: boolean;
>c : boolean

    d: unknown;
>d : unknown

};

type B = Omit<A, 'a'>;
>B : Pick<A, "b" | "c" | "d">

function f(x: B) {
>f : (x: B) => void
>x : Pick<A, "b" | "c" | "d">

    const b = x.b;
>b : string | undefined
>x.b : string | undefined
>x : Pick<A, "b" | "c" | "d">
>b : string | undefined

    x.b = "hello";
>x.b = "hello" : "hello"
>x.b : string | undefined
>x : Pick<A, "b" | "c" | "d">
>b : string | undefined
>"hello" : "hello"

    x.b = undefined;
>x.b = undefined : undefined
>x.b : string | undefined
>x : Pick<A, "b" | "c" | "d">
>b : string | undefined
>undefined : undefined

    const c = x.c;
>c : boolean
>x.c : boolean
>x : Pick<A, "b" | "c" | "d">
>c : boolean

    x.c = true;
>x.c = true : true
>x.c : any
>x : Pick<A, "b" | "c" | "d">
>c : any
>true : true

    const d = x.d;
>d : unknown
>x.d : unknown
>x : Pick<A, "b" | "c" | "d">
>d : unknown

    x.d = d;
>x.d = d : unknown
>x.d : unknown
>x : Pick<A, "b" | "c" | "d">
>d : unknown
>d : unknown
}

